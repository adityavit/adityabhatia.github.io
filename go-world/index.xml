<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go-worlds on Aditya Bhatia Blog!</title>
    <link>http://adityabhatia.com/go-world/</link>
    <description>Recent content in Go-worlds on Aditya Bhatia Blog!</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Aditya Bhatia Â© 2022</copyright>
    <lastBuildDate>Tue, 22 Feb 2022 17:47:10 -0800</lastBuildDate>
    
	<atom:link href="http://adityabhatia.com/go-world/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>OpenAPIv2 to openapiv2</title>
      <link>http://adityabhatia.com/go-world/openapiv2-to-openapiv2/</link>
      <pubDate>Tue, 22 Feb 2022 17:47:10 -0800</pubDate>
      
      <guid>http://adityabhatia.com/go-world/openapiv2-to-openapiv2/</guid>
      <description>While updating kube controller dependencies, got this strange error in the gitlab pipelines. Although everthing ran smoothly locally.
vendor/k8s.io/kube-openapi/pkg/util/proto/document.go:24:2: cannot find package &amp;quot;.&amp;quot; in: /builds/co2/cloud-delivery/stack-groups/vendor/github.com/googleapis/gnostic/openapiv2  It took some to figure out what was going, so adding this here for my reference and for someone else. In the newer version of github.com/googleapis/gnostic/openapiv2 package name has been updated from OpenAPIv2 to openapiv2.
Although it does change the name of the package locally, git doesn&amp;rsquo;t acknowledge the case change in the vendor directory as a valid change.</description>
    </item>
    
    <item>
      <title>Usage of ginkgo arguments using go test</title>
      <link>http://adityabhatia.com/go-world/ginkgo_params_with_go_test/</link>
      <pubDate>Fri, 19 Nov 2021 13:00:05 -0800</pubDate>
      
      <guid>http://adityabhatia.com/go-world/ginkgo_params_with_go_test/</guid>
      <description>Running ginkgo tests using go test is a neat way on integrating behavioural testing with go tests.
When using pass-through arguments or user defined arguments in ginkgo, they can passed in following way.
var life int func init() { flag.IntVar(&amp;amp;life, &amp;quot;life&amp;quot;, -1, &amp;quot;Meaning of Life!&amp;quot;) } func TestString(t *testing.T) { RegisterFailHandler(Fail) RunSpecs(t, &amp;quot;Run meaning of life suite&amp;quot;) } var _ = Describe(&amp;quot;Ultimate Question of Life, the Universe, and Everything&amp;quot;, func() { Context(&amp;quot;According to Deep Thought&amp;quot;, func() { When(&amp;quot;calculated over 7.</description>
    </item>
    
    <item>
      <title>Usage of reference in &#34;for range loops&#34; leads to a bug</title>
      <link>http://adityabhatia.com/go-world/reference_in_for_range/</link>
      <pubDate>Tue, 29 Sep 2020 10:02:55 -0700</pubDate>
      
      <guid>http://adityabhatia.com/go-world/reference_in_for_range/</guid>
      <description>Got pinched by a bug in the for range loop in my code. Let me describe it, so others can avoid it.
Principle: Avoid taking a reference of the local variable in the for range, and store it.
Inside the for range it is to keep in mind that if you are taking the reference of the assigned variable and storing it in another structure. It can give unexpected results.</description>
    </item>
    
  </channel>
</rss>