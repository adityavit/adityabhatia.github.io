<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Algos-ds on Aditya Bhatia Blog!</title>
    <link>http://adityabhatia.com/algos-ds/</link>
    <description>Recent content in Algos-ds on Aditya Bhatia Blog!</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Aditya Bhatia Â© 2020</copyright>
    <lastBuildDate>Wed, 12 Jan 2022 23:26:04 -0800</lastBuildDate>
    
	<atom:link href="http://adityabhatia.com/algos-ds/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Sorting N numbers</title>
      <link>http://adityabhatia.com/algos-ds/sorting-all/</link>
      <pubDate>Wed, 12 Jan 2022 23:26:04 -0800</pubDate>
      
      <guid>http://adityabhatia.com/algos-ds/sorting-all/</guid>
      <description>In this article will be adding different ways to sort an array of n numbers and code snippets for each one of them. Idea with this post is to keep all the sorting methods with code snippets in one place, for comparison purpose.
Leetcode problem:
 Sort an array  Decease &amp;amp; Conqure Strategies: Bubble Sort
 Time Complexity: O(N^2) In Place Stable  def sortArray(nums: List[int]) -&amp;gt; List[int]: # Bubble sort: Top down strategy, first do work then delegate.</description>
    </item>
    
    <item>
      <title>Sliding window I</title>
      <link>http://adityabhatia.com/algos-ds/sliding-window/</link>
      <pubDate>Sun, 09 Jan 2022 18:34:45 -0800</pubDate>
      
      <guid>http://adityabhatia.com/algos-ds/sliding-window/</guid>
      <description>In arrays and strings, there are a subset of problems which deal with window of subarrays or substrings. In such problems the idea is to search a subarray matching a particular condition. A brute-force way of checking all the sub-arrays or substrings gives a runtime complexity of O(N^2). Sliding Window technique can be really helpful in such problems to reduce the time complexity to O(N) in such problems. In this post I would be discussing some common code templates which can be used for solving using sliding window techniques.</description>
    </item>
    
    <item>
      <title>Permutations I</title>
      <link>http://adityabhatia.com/algos-ds/permutations/</link>
      <pubDate>Wed, 29 Dec 2021 16:36:17 -0800</pubDate>
      
      <guid>http://adityabhatia.com/algos-ds/permutations/</guid>
      <description>Finding permutations of elements in an array, is a fairly simple problem with the usage of recursion and backtracking.
In this article, adding a template to help with these kind of problems.
Example Problems:
 Permutations Permutations II  In the two problems the only difference is that in one problem all the numbers are unique and in other it is not. If all the numbers are not unique in the array then the number of permutations decreases by a factor of similar numbers factorial i.</description>
    </item>
    
    <item>
      <title>Monotonic Data Structures</title>
      <link>http://adityabhatia.com/algos-ds/monotonic-stack/</link>
      <pubDate>Thu, 23 Dec 2021 10:53:20 -0800</pubDate>
      
      <guid>http://adityabhatia.com/algos-ds/monotonic-stack/</guid>
      <description>Stacks are quite simple data structures with LIFO (Last In First Out) property. I added this post with the implementation of a stack using list/slice in python and go.
More constraint properties can be added to this simple stack structure, which can help solve multiple other problems.
In this post I will be talking about stack with monotonic property.
Monotone means same or unchanging. Defining stacks with monotonic increasing/decreasing properties means all elements in the stack are unchangingly increasing or decreasing in nature.</description>
    </item>
    
    <item>
      <title>Stacks in go and python</title>
      <link>http://adityabhatia.com/algos-ds/stacks/</link>
      <pubDate>Tue, 21 Dec 2021 19:21:55 -0800</pubDate>
      
      <guid>http://adityabhatia.com/algos-ds/stacks/</guid>
      <description>Using list as a stack in python Stacks come very handy in solving some of the problems. Often using just an array does the purpose rather than specific data structures.
In python to use a list as a stack is straight forward with append and pop methods already available.
if __name__ == &#39;__main__&#39;: st = [] for i in range(10): st.append(i) for i in range(10): top = st.pop() print(top)  Using slices as a stack in go In go to use slices as a stack, push and pop methods are missing.</description>
    </item>
    
    <item>
      <title>Partitioning an Array</title>
      <link>http://adityabhatia.com/algos-ds/array-partition/</link>
      <pubDate>Thu, 02 Dec 2021 19:23:29 -0800</pubDate>
      
      <guid>http://adityabhatia.com/algos-ds/array-partition/</guid>
      <description>Paritioning an array is a common problem in computer science. In quick sort, the array is partitioned into smaller/equal and larger values based on the pivot. There are many other partition problems, where partition function is different than the one in quick sort.
In this post describing a generic code template to solve such partition problems in O(n) time and O(1) space.
2 way partition problem
Example problems:
 Partition the array such that all the even numbers come before all the odd numbers.</description>
    </item>
    
  </channel>
</rss>