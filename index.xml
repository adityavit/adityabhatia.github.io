<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Aditya Bhatia Blog!</title>
    <link>http://adityabhatia.com/</link>
    <description>Recent content on Aditya Bhatia Blog!</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Aditya Bhatia © 2022</copyright>
    <lastBuildDate>Sun, 11 Aug 2024 22:24:58 -0700</lastBuildDate>
    
	<atom:link href="http://adityabhatia.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Artificial coding assistant</title>
      <link>http://adityabhatia.com/thoughts/artificial_code_assistant/</link>
      <pubDate>Sun, 11 Aug 2024 22:24:58 -0700</pubDate>
      
      <guid>http://adityabhatia.com/thoughts/artificial_code_assistant/</guid>
      <description>The Impact of Large Language Models on Software Engineering: A Developer’s Perspective In recent months, I’ve spent considerable time experimenting with Large Language Models (LLMs) like OpenAI&amp;rsquo;s ChatGPT and Claude&amp;rsquo;s Sonnet 3.5. I’ve been genuinely impressed by their ability to generate responses on virtually any topic. This rapid advancement in AI has sparked a lot of conversations about whether these models might replace software developers or reduce the demand for software engineering jobs over time.</description>
    </item>
    
    <item>
      <title>Concurrency Patterns</title>
      <link>http://adityabhatia.com/scalable-world/concurrency-patterns/</link>
      <pubDate>Wed, 28 Feb 2024 12:57:04 -0800</pubDate>
      
      <guid>http://adityabhatia.com/scalable-world/concurrency-patterns/</guid>
      <description>This article explains some of the patterns related to concurrent problems. These patterns can be reused across multiple problems. Some of these patterns have been borrowed from the book Concurrency in Go and has been kept here for a quick reference.
So in this post I will add the templates related to concurrency problems and patterns related to that!
So, let&amp;rsquo;s start with what is Concurrency?
Concurrency is way to execute sections of code in an interleave manner.</description>
    </item>
    
    <item>
      <title>Object oriented design in python</title>
      <link>http://adityabhatia.com/python/ood/</link>
      <pubDate>Mon, 12 Feb 2024 17:28:22 -0800</pubDate>
      
      <guid>http://adityabhatia.com/python/ood/</guid>
      <description>In this article will be looking at some of the ways to write object based design code in python.
Iteratoring over collection of items Iterators are classes which are defined to iterate over the collection of objects. You can use the iterator for example iterating over students enrolled in a course. This can be done let&amp;rsquo;s say when the internal structure of the students is not exposed or we need to lazy load the students from the database or the network only when iterate over a particular object rather than loading the whole collection of objects.</description>
    </item>
    
    <item>
      <title>Mlops - Model Inference</title>
      <link>http://adityabhatia.com/ml-world/mlops-model-inference/</link>
      <pubDate>Fri, 09 Feb 2024 23:34:38 -0800</pubDate>
      
      <guid>http://adityabhatia.com/ml-world/mlops-model-inference/</guid>
      <description>Model inference is a way to run the model on the server and pass in the user data to get the response from the model. There are many steps which go in running the model on production and getting the inference. In this article I will be exploring some of the tools to do server the model.
Let&amp;rsquo;s take a look first what are some of the challenges and important points for any model serving tool:</description>
    </item>
    
    <item>
      <title>Object Oriented Design (OOD)</title>
      <link>http://adityabhatia.com/scalable-world/design-patterns/</link>
      <pubDate>Mon, 05 Feb 2024 12:31:40 -0800</pubDate>
      
      <guid>http://adityabhatia.com/scalable-world/design-patterns/</guid>
      <description>SOLID design principles  Let&amp;rsquo;s start this article with going over the SOLID design principles for Object Oriented design and then seeing how the listed design pattern captures the some of the principles defined in it.
  S: Single Responsibility Based on this principle, a class definition should focus on single responsibility. A class should not try to encapsulate the business logic for doing multiple things, rather it should focus on doing just one thing and delegate other logic to objects of classes responsible for doing just that.</description>
    </item>
    
    <item>
      <title>Trie</title>
      <link>http://adityabhatia.com/algos-ds/trie/</link>
      <pubDate>Tue, 30 Jan 2024 19:21:18 -0800</pubDate>
      
      <guid>http://adityabhatia.com/algos-ds/trie/</guid>
      <description>In this post will document about prefix trees also called as Trie. A Trie according to wikipedia is defined as A prefix trie is an ordered tree data structure used in the representation of a set of strings over a finite alphabet set, which allows efficient storage of words with common prefixes. In this definition important aspects of a Trie are:
 Ordered Tree data structure.  Let&amp;rsquo;s look at the first property Ordered Tree data structure.</description>
    </item>
    
    <item>
      <title>Priority Queues</title>
      <link>http://adityabhatia.com/algos-ds/pq/</link>
      <pubDate>Sun, 21 Jan 2024 11:31:15 -0800</pubDate>
      
      <guid>http://adityabhatia.com/algos-ds/pq/</guid>
      <description>Priority Queues also implemented using Heap are great tools to solve some of the problems. These are data structures which are used to maintain the order (increasing/decreasing) of the items in data structure. A property of heaps is that you can get the top most (i.e. minimum or maximum) item in all the items in O(1) operation. More theory
This data structure is very useful when there is a stream of items and sorting cannot be performed as all items are not seen, at any point when running over the stream, algorithm needs the maximum or minimum item in the items seen so far.</description>
    </item>
    
    <item>
      <title>Code snippets</title>
      <link>http://adityabhatia.com/python/snippets/</link>
      <pubDate>Sat, 20 Jan 2024 15:32:01 -0800</pubDate>
      
      <guid>http://adityabhatia.com/python/snippets/</guid>
      <description>This post list some of the python code snippets which are useful in coding interviews and problem solving. Such snippets, although are easy to remember and are often used in many problems.
Added here for reference and some common gotchas.
Initialize an array with initial values # Initialize an array of size n with 0 # Creates an array as [0, 0, 0] if n = 3 a = [0] * n # another way to write this: # 0, 0, 0 a = [ 0 for _ in range(3)] # Initialize an 2D array of size rows `n` and `m` columns with value 0 # Creates an array as [[0,0], [0,0], [0,0]] if n = 3, m = 2 a = [[0] * m for _ in range(n)] # Do not use, * operator to create multi-dimension list as it `*` copies references.</description>
    </item>
    
    <item>
      <title>Directed Graphs</title>
      <link>http://adityabhatia.com/algos-ds/directed-graphs/</link>
      <pubDate>Wed, 03 Jan 2024 23:52:34 -0800</pubDate>
      
      <guid>http://adityabhatia.com/algos-ds/directed-graphs/</guid>
      <description>In the previous section on Graphs, discussed about un-directed graphs and applied two graph traversal algorithms dfs and bfs. The problems on undirected are usually more simpler, because the edges in the dfs and bfs tree are very simple in the graphs as there is no direction to the edge. So usually problem are about traversal of the graph or finding a cycle or connected component in graph or a path between two nodes.</description>
    </item>
    
    <item>
      <title>Graphs</title>
      <link>http://adityabhatia.com/algos-ds/graphs/</link>
      <pubDate>Tue, 02 Jan 2024 11:45:37 -0800</pubDate>
      
      <guid>http://adityabhatia.com/algos-ds/graphs/</guid>
      <description>In this discuss we will look at patterns for solving graph problems. IMO the most challenging part of solving graph problems, is modeling the problem as a graph problem. Once the problem is modeled as a graph problem, the rest of the algorithm around the graph problems are quite standard and usually involves some of kind of traversal either BFS or DFS on the graph object. The complexity estimation of the graph problem also requires careful evaluation of the vertices and edges.</description>
    </item>
    
    <item>
      <title>Dynamic Programming (Part 2)</title>
      <link>http://adityabhatia.com/algos-ds/dp-2/</link>
      <pubDate>Wed, 06 Dec 2023 23:37:41 -0800</pubDate>
      
      <guid>http://adityabhatia.com/algos-ds/dp-2/</guid>
      <description>This post is continuation of the first dynamic programing post. In this post will be looking into a class of optimization problem which can be solved with dynamic programming.
Let&amp;rsquo;s first see what are some of the approaches to solve optimization problem.
  Brute Force : In this approach, basically we are traversing all the paths in the tree. If there are exponential spread of the tree, the solution will lead to an exponential solution.</description>
    </item>
    
    <item>
      <title>Selection</title>
      <link>http://adityabhatia.com/algos-ds/selection/</link>
      <pubDate>Wed, 29 Nov 2023 10:33:53 -0800</pubDate>
      
      <guid>http://adityabhatia.com/algos-ds/selection/</guid>
      <description>In this article will summarize mathematics related to selection of k items in n items and counting problems problems related to selection of items.
Let&amp;rsquo;s first understand what n choose k means, i.e. choosing/selecting k items out of n items.
Let&amp;rsquo;s take an example of 4 balls of Red(R), Blue(B), Green(G), White(W) color and try to understand from that. Whenever we choose k items from n items, we can create a bucket of size k and put the items in that bucket, so the remaining items outside of bucket will be n - k at the end of the selection.</description>
    </item>
    
    <item>
      <title>Enphase</title>
      <link>http://adityabhatia.com/investments/enphase/</link>
      <pubDate>Mon, 20 Nov 2023 10:51:23 -0800</pubDate>
      
      <guid>http://adityabhatia.com/investments/enphase/</guid>
      <description>Summary about Enphase based on Q3 earnings call
Company Overview
Enphase Energy is an American energy technology company that develops and manufactures solar microinverters, battery energy storage, and EV charging stations primarily for residential customers. The company is headquartered in Fremont, California, and has a global presence with sales and distribution in over 100 countries.
Key Financial Highlights
 Revenue: $551.1 million in Q3 2023, down 23% from Q2 2023 Gross margin: 48.</description>
    </item>
    
    <item>
      <title>Dynamic Programming (Part 1)</title>
      <link>http://adityabhatia.com/algos-ds/dp-1/</link>
      <pubDate>Wed, 03 May 2023 22:18:45 -0700</pubDate>
      
      <guid>http://adityabhatia.com/algos-ds/dp-1/</guid>
      <description>Dynamic programming is a problem solving strategy which can help to improve exponential runtime of the algorithm for certain type of problems. In this article, I will go over some of the background of this strategy with examples. In further article of these series, I will go over different type of DP problems I have encountered and templates/strategy to solve them.
The name as dynamic programming for this strategy hides the actual strategy.</description>
    </item>
    
    <item>
      <title>Tree Traversal</title>
      <link>http://adityabhatia.com/algos-ds/tree-traversal/</link>
      <pubDate>Tue, 18 Oct 2022 12:28:48 -0700</pubDate>
      
      <guid>http://adityabhatia.com/algos-ds/tree-traversal/</guid>
      <description>Trees can be traversed in multiple ways. This document talks about multiple ways to traverse tree. I added templates for the such traversal here for easy reference and also set of sample problems to practice the templates on.
 Level-wise Tree Traversal  A level-wise traversal of the tree can be described as visiting the nodes in the tree from root to the leaves such that all the parents at the same distance from root are visited before their children.</description>
    </item>
    
    <item>
      <title>Binary Search II</title>
      <link>http://adityabhatia.com/algos-ds/binary-search-ii/</link>
      <pubDate>Wed, 13 Apr 2022 11:33:37 -0700</pubDate>
      
      <guid>http://adityabhatia.com/algos-ds/binary-search-ii/</guid>
      <description>In the previous article related to binary search, when the element is found and when element is not found in a sorted array. In this article will look at binary search when overall array is exactly not sorted.
Example Problem:
 Peak index in a mountain Array  In this problem, a peak is somewhere middle of the array. All the elements to the left and right of the peak are monotonically decreasing.</description>
    </item>
    
    <item>
      <title>Binary Search I</title>
      <link>http://adityabhatia.com/algos-ds/binary-search/</link>
      <pubDate>Tue, 05 Apr 2022 14:01:53 -0700</pubDate>
      
      <guid>http://adityabhatia.com/algos-ds/binary-search/</guid>
      <description>Binary search is the fastest way to search elements in sorted static array have time complexities of O(logn). In this article will look a template for doing binary search and then extending that template for variants of binary search problems.
Example
 Binary Search  Template for Iterative Binary Search
def binarySearch(nums: List[int], target: int) -&amp;gt; int: st, end = 0, len(nums) - 1 while st &amp;lt;= end: mid = st + (end - st)//2 if nums[mid] == target: return mid if nums[mid] &amp;lt; target: st = mid + 1 else: end = mid - 1 return -1  Other Examples:</description>
    </item>
    
    <item>
      <title>Designing Data-Intensive Application</title>
      <link>http://adityabhatia.com/notes/books/ddia/</link>
      <pubDate>Wed, 16 Mar 2022 13:09:34 -0700</pubDate>
      
      <guid>http://adityabhatia.com/notes/books/ddia/</guid>
      <description>Question Model:
Modeling the DDIA book in terms of Questions and Answers.
Relaible, Scalable and Maintainable Applications Partitioning Transactions   What does ACID stand for in transactions? ACID in the transactions stand for A : Atomicity C : Consistency I : Isolation D : Durability ADID transactions provided by the database systems provide the safety guarantees, so that the application can be build with needing to worry about these properties.</description>
    </item>
    
    <item>
      <title>Intervals</title>
      <link>http://adityabhatia.com/algos-ds/intervals/</link>
      <pubDate>Tue, 08 Mar 2022 23:37:45 -0800</pubDate>
      
      <guid>http://adityabhatia.com/algos-ds/intervals/</guid>
      <description>In this article will talk about the interval problems, and look for pattern in such problems. In interval problems a sequence of overlapping and non-overlapping intervals are given denoted by [start, end] time on the number line.
Example such problems
 Merge Intervals  An interval is defined by a range by two points, start and end both inclusive. An overlap of two intervals can be seen in four ways, if one of the interval is taken as a reference.</description>
    </item>
    
    <item>
      <title>OpenAPIv2 to openapiv2</title>
      <link>http://adityabhatia.com/go-world/openapiv2-to-openapiv2/</link>
      <pubDate>Tue, 22 Feb 2022 17:47:10 -0800</pubDate>
      
      <guid>http://adityabhatia.com/go-world/openapiv2-to-openapiv2/</guid>
      <description>While updating kube controller dependencies, got this strange error in the gitlab pipelines. Although everthing ran smoothly locally.
vendor/k8s.io/kube-openapi/pkg/util/proto/document.go:24:2: cannot find package &amp;quot;.&amp;quot; in: /builds/co2/cloud-delivery/stack-groups/vendor/github.com/googleapis/gnostic/openapiv2  It took some to figure out what was going, so adding this here for my reference and for someone else. In the newer version of github.com/googleapis/gnostic/openapiv2 package name has been updated from OpenAPIv2 to openapiv2.
Although it does change the name of the package locally, git doesn&amp;rsquo;t acknowledge the case change in the vendor directory as a valid change.</description>
    </item>
    
    <item>
      <title>Sliding Window II</title>
      <link>http://adityabhatia.com/algos-ds/sliding-window-ii/</link>
      <pubDate>Tue, 08 Feb 2022 22:56:57 -0800</pubDate>
      
      <guid>http://adityabhatia.com/algos-ds/sliding-window-ii/</guid>
      <description>This article is continuation of the previous article about sliding windows I which talks about fixed length sliding window. In this aritcle will look for problems which can be solved using variable length sliding window. Variable length sliding window problems are more tricky to detect. Sometimes a problem will mention a window which makes it easier, but sometimes that conclusion needs to be done by analyzing and running examples in the problem.</description>
    </item>
    
    <item>
      <title>Sorting N numbers</title>
      <link>http://adityabhatia.com/algos-ds/sorting-all/</link>
      <pubDate>Wed, 12 Jan 2022 23:26:04 -0800</pubDate>
      
      <guid>http://adityabhatia.com/algos-ds/sorting-all/</guid>
      <description>In this article will be adding different ways to sort an array of n numbers and code snippets for each one of them. Idea with this post is to keep all the sorting methods with code snippets in one place, for comparison purpose.
Leetcode problem:
 Sort an array  Decease &amp;amp; Conqure Strategies: Bubble Sort  Time Complexity: O(N^2) In Place Stable  def sortArray(nums: List[int]) -&amp;gt; List[int]: # Bubble sort: Top down strategy, first do work then delegate.</description>
    </item>
    
    <item>
      <title>Sliding window I</title>
      <link>http://adityabhatia.com/algos-ds/sliding-window/</link>
      <pubDate>Sun, 09 Jan 2022 18:34:45 -0800</pubDate>
      
      <guid>http://adityabhatia.com/algos-ds/sliding-window/</guid>
      <description>In arrays and strings, there are a subset of problems which deal with window of subarrays or substrings. In such problems the idea is to search a subarray matching a particular condition. A brute-force way of checking all the sub-arrays or substrings gives a runtime complexity of O(N^2). Sliding Window technique can be really helpful in such problems to reduce the time complexity to O(N) in such problems. In this post I would be discussing some common code templates which can be used for solving using sliding window techniques.</description>
    </item>
    
    <item>
      <title>Permutations I</title>
      <link>http://adityabhatia.com/algos-ds/permutations/</link>
      <pubDate>Wed, 29 Dec 2021 16:36:17 -0800</pubDate>
      
      <guid>http://adityabhatia.com/algos-ds/permutations/</guid>
      <description>Finding permutations of elements in an array, is a fairly simple problem with the usage of recursion and backtracking.
In this article, adding a template to help with these kind of problems.
Example Problems:
 Permutations Permutations II  In the two problems the only difference is that in one problem all the numbers are unique and in other it is not. If all the numbers are not unique in the array then the number of permutations decreases by a factor of similar numbers factorial i.</description>
    </item>
    
    <item>
      <title>Monotonic Data Structures</title>
      <link>http://adityabhatia.com/algos-ds/monotonic-stack/</link>
      <pubDate>Thu, 23 Dec 2021 10:53:20 -0800</pubDate>
      
      <guid>http://adityabhatia.com/algos-ds/monotonic-stack/</guid>
      <description>Stacks are quite simple data structures with LIFO (Last In First Out) property. I added this post with the implementation of a stack using list/slice in python and go.
More constraint properties can be added to this simple stack structure, which can help solve multiple other problems.
In this post I will be talking about stack with monotonic property.
Monotone means same or unchanging. Defining stacks with monotonic increasing/decreasing properties means all elements in the stack are unchangingly increasing or decreasing in nature.</description>
    </item>
    
    <item>
      <title>Stacks in go and python</title>
      <link>http://adityabhatia.com/algos-ds/stacks/</link>
      <pubDate>Tue, 21 Dec 2021 19:21:55 -0800</pubDate>
      
      <guid>http://adityabhatia.com/algos-ds/stacks/</guid>
      <description>Using list as a stack in python Stacks come very handy in solving some of the problems. Often using just an array does the purpose rather than specific data structures.
In python to use a list as a stack is straight forward with append and pop methods already available.
if __name__ == &#39;__main__&#39;: st = [] for i in range(10): st.append(i) for i in range(10): top = st.pop() print(top)  Using slices as a stack in go In go to use slices as a stack, push and pop methods are missing.</description>
    </item>
    
    <item>
      <title>Partitioning an Array</title>
      <link>http://adityabhatia.com/algos-ds/array-partition/</link>
      <pubDate>Thu, 02 Dec 2021 19:23:29 -0800</pubDate>
      
      <guid>http://adityabhatia.com/algos-ds/array-partition/</guid>
      <description>Paritioning an array is a common problem in computer science. In quick sort, the array is partitioned into smaller/equal and larger values based on the pivot. There are many other partition problems, where partition function is slightly different than the one in quick sort. Along with partitioning array the same partitioning technique can be used to find kth smallest/largest element in the array using quick select.
In this post describing a generic code template based on the Nico Lomuto algorithm to solve such partition problems in O(n) time and O(1) space.</description>
    </item>
    
    <item>
      <title>Usage of ginkgo arguments using go test</title>
      <link>http://adityabhatia.com/go-world/ginkgo_params_with_go_test/</link>
      <pubDate>Fri, 19 Nov 2021 13:00:05 -0800</pubDate>
      
      <guid>http://adityabhatia.com/go-world/ginkgo_params_with_go_test/</guid>
      <description>Running ginkgo tests using go test is a neat way on integrating behavioural testing with go tests.
When using pass-through arguments or user defined arguments in ginkgo, they can passed in following way.
var life int func init() { flag.IntVar(&amp;amp;life, &amp;quot;life&amp;quot;, -1, &amp;quot;Meaning of Life!&amp;quot;) } func TestString(t *testing.T) { RegisterFailHandler(Fail) RunSpecs(t, &amp;quot;Run meaning of life suite&amp;quot;) } var _ = Describe(&amp;quot;Ultimate Question of Life, the Universe, and Everything&amp;quot;, func() { Context(&amp;quot;According to Deep Thought&amp;quot;, func() { When(&amp;quot;calculated over 7.</description>
    </item>
    
    <item>
      <title>Usage of reference in &#34;for range loops&#34; leads to a bug</title>
      <link>http://adityabhatia.com/go-world/reference_in_for_range/</link>
      <pubDate>Tue, 29 Sep 2020 10:02:55 -0700</pubDate>
      
      <guid>http://adityabhatia.com/go-world/reference_in_for_range/</guid>
      <description>Got pinched by a bug in the for range loop in my code. Let me describe it, so others can avoid it.
Principle: Avoid taking a reference of the local variable in the for range, and store it.
Inside the for range it is to keep in mind that if you are taking the reference of the assigned variable and storing it in another structure. It can give unexpected results.</description>
    </item>
    
  </channel>
</rss>