<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Aditya Bhatia Blog!</title>
    <link>http://adityabhatia.com/</link>
    <description>Recent content on Aditya Bhatia Blog!</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Aditya Bhatia Â© 2020</copyright>
    <lastBuildDate>Thu, 02 Dec 2021 19:23:29 -0800</lastBuildDate>
    
	<atom:link href="http://adityabhatia.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Partitioning an Array</title>
      <link>http://adityabhatia.com/algos-ds/array-partition/</link>
      <pubDate>Thu, 02 Dec 2021 19:23:29 -0800</pubDate>
      
      <guid>http://adityabhatia.com/algos-ds/array-partition/</guid>
      <description>Paritioning an array is a common problem in computer science. In quick sort, the array is partitioned into smaller/equal and larger values based on the pivot. There are many other partition problems partition function is different than the one in quick sort. Here adding a generic code template to solve such partition problems in O(n) time and O(1) space (or without using extra space).
2 way partition problem
Examples:
 Partition the array such that all the even numbers come before all the odd numbers.</description>
    </item>
    
    <item>
      <title>Usage of ginkgo arguments using go test</title>
      <link>http://adityabhatia.com/go-world/ginkgo_params_with_go_test/</link>
      <pubDate>Fri, 19 Nov 2021 13:00:05 -0800</pubDate>
      
      <guid>http://adityabhatia.com/go-world/ginkgo_params_with_go_test/</guid>
      <description>Running ginkgo tests using go test is a neat way on integrating behavioural testing with go tests.
When using pass-through arguments or user defined arguments in ginkgo, they can passed in following way.
var life int func init() { flag.IntVar(&amp;amp;life, &amp;quot;life&amp;quot;, -1, &amp;quot;Meaning of Life!&amp;quot;) } func TestString(t *testing.T) { RegisterFailHandler(Fail) RunSpecs(t, &amp;quot;Run meaning of life suite&amp;quot;) } var _ = Describe(&amp;quot;Ultimate Question of Life, the Universe, and Everything&amp;quot;, func() { Context(&amp;quot;According to Deep Thought&amp;quot;, func() { When(&amp;quot;calculated over 7.</description>
    </item>
    
    <item>
      <title>Usage of reference in &#34;for range loops&#34; leads to a bug</title>
      <link>http://adityabhatia.com/go-world/reference_in_for_range/</link>
      <pubDate>Tue, 29 Sep 2020 10:02:55 -0700</pubDate>
      
      <guid>http://adityabhatia.com/go-world/reference_in_for_range/</guid>
      <description>Got pinched by a bug in the for range loop in my code. Let me describe it, so others can avoid it.
Principle: Avoid taking a reference of the local variable in the for range, and store it.
Inside the for range it is to keep in mind that if you are taking the reference of the assigned variable and storing it in another structure. It can give unexpected results.</description>
    </item>
    
  </channel>
</rss>