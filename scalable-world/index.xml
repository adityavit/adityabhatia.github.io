<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Scalable-worlds on Aditya Bhatia Blog!</title>
    <link>http://adityabhatia.com/scalable-world/</link>
    <description>Recent content in Scalable-worlds on Aditya Bhatia Blog!</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Aditya Bhatia Â© 2022</copyright>
    <lastBuildDate>Wed, 28 Feb 2024 12:57:04 -0800</lastBuildDate>
    
	<atom:link href="http://adityabhatia.com/scalable-world/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Concurrency Patterns</title>
      <link>http://adityabhatia.com/scalable-world/concurrency-patterns/</link>
      <pubDate>Wed, 28 Feb 2024 12:57:04 -0800</pubDate>
      
      <guid>http://adityabhatia.com/scalable-world/concurrency-patterns/</guid>
      <description>This article explains some of the patterns related to concurrent problems. These patterns can be reused across multiple problems. Some of these patterns have been borrowed from the book Concurrency in Go and has been kept here for a quick reference.
So in this post I will add the templates related to concurrency problems and patterns related to that!
So, let&amp;rsquo;s start with what is Concurrency?
Concurrency is way to execute sections of code in an interleave manner.</description>
    </item>
    
    <item>
      <title>Object Oriented Design (OOD)</title>
      <link>http://adityabhatia.com/scalable-world/design-patterns/</link>
      <pubDate>Mon, 05 Feb 2024 12:31:40 -0800</pubDate>
      
      <guid>http://adityabhatia.com/scalable-world/design-patterns/</guid>
      <description>SOLID design principles  Let&amp;rsquo;s start this article with going over the SOLID design principles for Object Oriented design and then seeing how the listed design pattern captures the some of the principles defined in it.
  S: Single Responsibility Based on this principle, a class definition should focus on single responsibility. A class should not try to encapsulate the business logic for doing multiple things, rather it should focus on doing just one thing and delegate other logic to objects of classes responsible for doing just that.</description>
    </item>
    
  </channel>
</rss>